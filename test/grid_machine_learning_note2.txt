from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

# --- 分離特徵與標籤 ---
X = df.drop("Default", axis=1)
y = df["Default"]

# 類別變數做 one-hot encoding
X = pd.get_dummies(X)

# --- Step 1: 切分數據 ---
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# --- Step 2: 建立 Pipeline ---
pipeline = Pipeline([
    ('scaler', StandardScaler()),            # 先做標準化
    ('logreg', LogisticRegression(max_iter=1000))  # 再跑 Logistic Regression
])

# --- Step 3: 定義超參數網格 ---
param_grid = {
    'logreg__C': [0.1, 1, 10],
    'logreg__solver': ['liblinear', 'lbfgs']
}

# --- Step 4: GridSearchCV ---
grid_search = GridSearchCV(pipeline, param_grid, cv=5)
grid_search.fit(X_train, y_train)

print("--- GridSearchCV 結果 ---")
print(f"最佳超參數: {grid_search.best_params_}")
print(f"最佳模型分數 (交叉驗證): {grid_search.best_score_:.4f}")

# --- Step 5: 用最佳模型在測試集預測 ---
best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test)
y_pred_proba = best_model.predict_proba(X_test)[:, 1]

# --- Step 6: 評估 ---
print("\n--- 獨立測試集評估報告 ---")
print("--- 混淆矩陣 ---")
print(confusion_matrix(y_test, y_pred))

print("\n--- 分類報告 ---")
print(classification_report(y_test, y_pred))

print("\n--- ROC AUC Score ---")
print(f"ROC AUC Score: {roc_auc_score(y_test, y_pred_proba):.4f}")

# --- Step 7: 繪製 ROC 曲線 ---
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, label=f"ROC curve (AUC = {roc_auc:.4f})")
plt.plot([0, 1], [0, 1], 'k--')  # 參考線 (隨機預測)
plt.xlabel("False Positive Rate (FPR)")
plt.ylabel("True Positive Rate (TPR)")
plt.title("ROC Curve - Logistic Regression")
plt.legend(loc="lower right")
plt.show()

